SOURCES=src/SongDatabase.cpp lib/cmd-app-utils/cpp/TaskBase.cpp \
			  lib/cmd-app-utils/cpp/Task.cpp lib/cmd-app-utils/cpp/CommandServer.cpp \
			  $(foreach TASK,$(wildcard tasks/cpp/*.cpp), $(TASK)) \
			  src/SongBookApp.cpp src/main.cpp
OUTPUT_FILE=songbook.out
H_FILES=lib/json/json.hpp lib/argparse/argparse.hpp
CONFIG_FILE=config.json

H_DIRS=lib/json src lib/cmd-app-utils tasks/h lib/cmdapp tasks

COMPILER=g++ -std=c++20 

# shall be overriden in CLI 
TASK_NAME?=
# Default html open
BROWSER=xdg-open

.PHONY: all
all: gen_tasks compile link run

.PHONY: compile-lib
compile-lib:
	@$(COMPILER) -c $(H_FILES) -B $(H_DIRS)

# TODO old code; refactor
.PHONY: create_task
create_task:
	$(if $(TASK_NAME),,$(error TASK_NAME var empty, cannot create task!))
	@touch tasks/cpp/$(TASK_NAME).cpp
	@echo '#include <string>' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '#include <iostream>' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '#include <iomanip>' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '#include "$(TASK_NAME).h"' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '#include "SongBookApp.h"' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '' >> tasks/cpp/$(TASK_NAME).cpp
	@echo "int $(TASK_NAME)::Start()" >> tasks/cpp/$(TASK_NAME).cpp
	@echo '{' >> tasks/cpp/$(TASK_NAME).cpp
	@echo  '  std::cout << "TO BE IMPLEMENTED" << std::endl;'>> tasks/cpp/$(TASK_NAME).cpp
	@echo  "  return 1;" >> tasks/cpp/$(TASK_NAME).cpp
	@echo '}' >> tasks/cpp/$(TASK_NAME).cpp   
	@touch tasks/h/$(TASK_NAME).h
	@echo '#include <string>'    >> tasks/h/$(TASK_NAME).h
	@echo '#include "cmdapputils.h"'    >> tasks/h/$(TASK_NAME).h
	@echo "" >> tasks/h/$(TASK_NAME).h
	@echo 'class SongBookApp;'     >> tasks/h/$(TASK_NAME).h
	@echo "" >> tasks/h/$(TASK_NAME).h
	@echo "class $(TASK_NAME) : public Task<SongBookApp>"    >> tasks/h/$(TASK_NAME).h
	@echo "{"    >> tasks/h/$(TASK_NAME).h
	@echo "public:"    >> tasks/h/$(TASK_NAME).h
	@echo "  $(TASK_NAME)(std::string cmd, SongBookApp* parent) "    >> tasks/h/$(TASK_NAME).h
	@echo "    : Task<SongBookApp>(cmd, parent) {};"    >> tasks/h/$(TASK_NAME).h
	@echo ""    >> tasks/h/$(TASK_NAME).h
	@echo "int Start() override;"    >> tasks/h/$(TASK_NAME).h
	@echo "" >> tasks/h/$(TASK_NAME).h
	@echo '};'    >> tasks/h/$(TASK_NAME).h

gen_tasks:
	@echo "// Autogenerated by Makefile ..." > tasks/tasks.h
	@echo "" >> tasks/tasks.h
	@for TASK in $(notdir $(wildcard tasks/h/*.h)); do echo "#include \"h/$$TASK\""; done >> tasks/tasks.h

# TODO
.PHONY: lib
lib:
	$(COMPILER) -shared $(H_FILES) Song.cpp Database.cpp -o Database.so

.PHONY: build
build: gen_tasks compile-lib compile link

# TODO remove
.PHONY: debug
debug: compile-with-debug link
	gdb ./$(OUTPUT_FILE)

.PHONY: run
run:
	@./$(OUTPUT_FILE) $(if $(CONFIG_FILE),-config $(CONFIG_FILE),)

.PHONY: compile
compile:
	@$(COMPILER) $(foreach hdir,$(H_DIRS),-I $(hdir)) -c $(SOURCES) -lcurl -l sqlite3

.PHONY: clean
clean:
	@rm -f *.o
	@rm -f ./$(OUTPUT_FILE)
	@rm -f *.aux
	@rm -f *.tex
	@rm -f *.log

.PHONY: doxygen
doxygen:
	$(if $(wildcard docs),,$(shell mkdir docs))
	@doxygen doxygen.conf

.PHONY: docs
docs:
	@$(BROWSER) docs/html/index.html

.PHONY: bin
bin: all
	@cp $(OUTPUT_FILE) /usr/local/bin/songbook

link:
	@$(COMPILER) $(foreach file, $(SOURCES), $(notdir $(basename $(file)).o)) -o $(OUTPUT_FILE) -lcurl -l sqlite3
	rm *.o
