SOURCES=src/SongDatabase.cpp lib/cmd-app-utils/cpp/TaskBase.cpp \
			  lib/cmd-app-utils/cpp/Task.cpp lib/cmd-app-utils/cpp/CommandServer.cpp \
			  src/SongBookFormatter.cpp \
			  $(foreach TASK,$(wildcard tasks/cpp/*.cpp), $(TASK)) \
			  src/SongBookApp.cpp src/main.cpp
OUTPUT_FILE=songbook.out
H_FILES=lib/json/json.hpp lib/argparse/argparse.hpp

# Bard tool specific variables
BARD_DIR=bard/
BARD_CMD=bard

CONFIG_FILE?=config.json
COMMANDS?=
LOOP?=

H_DIRS=lib/json src lib/cmd-app-utils tasks/h tasks

COMPILER=g++ -std=c++20 

# shall be overriden in CLI 
TASK_NAME?=
# Default html open
BROWSER=xdg-open

.PHONY: all
all: gen_tasks compile link run

.PHONY: compile-lib
compile-lib:
	@$(COMPILER) -c $(H_FILES) -B $(H_DIRS)

gen_tasks:
	@echo "// Autogenerated by Makefile ..." > tasks/tasks.h
	@echo "" >> tasks/tasks.h
	@for TASK in $(notdir $(wildcard tasks/h/*.h)); do echo "#include \"h/$$TASK\""; done >> tasks/tasks.h

# TODO
.PHONY: lib
lib:
	$(COMPILER) -shared $(H_FILES) Song.cpp Database.cpp -o Database.so

.PHONY: build
build: build-bard gen_tasks compile-lib compile link

.PHONY: build-bard
build-bard:
	@(cd lib/bard && make && make release)
	@if [ ! -d "$(BARD_DIR)" ]; then mkdir $(BARD_DIR); fi
	@(cd $(BARD_DIR) && ln -s -f $(BARD_CMD) ../lib/bard/target/release/bard)

# TODO remove
.PHONY: debug
debug: compile-with-debug link
	gdb ./$(OUTPUT_FILE)

.PHONY: run
run:
	@./$(OUTPUT_FILE) $(if $(CONFIG_FILE),-config $(CONFIG_FILE),) $(if $(COMMANDS),-cmd $(COMMANDS),) $(if $(LOOP),-loop $(LOOP),)

.PHONY: compile
compile:
	@$(COMPILER) $(foreach hdir,$(H_DIRS),-I $(hdir)) -c $(SOURCES) -lcurl -l sqlite3

.PHONY: clean
clean:
	@rm -f *.o
	@rm -f ./$(OUTPUT_FILE)
	@rm -f *.aux
	@rm -f *.tex
	@rm -f *.log

.PHONY: doxygen
doxygen:
	$(if $(wildcard docs),,$(shell mkdir docs))
	@doxygen doxygen.conf

.PHONY: docs
docs:
	@$(BROWSER) docs/html/index.html

.PHONY: bin
bin: all
	@cp $(OUTPUT_FILE) /usr/local/bin/songbook

link:
	@$(COMPILER) $(foreach file, $(SOURCES), $(notdir $(basename $(file)).o)) -o $(OUTPUT_FILE) -lcurl -l sqlite3
	rm *.o
