
SOURCES=Song.cpp Database.cpp cmdapp.cpp
OUTPUT_FILE=songbook
O_FILES=
H_FILES=./json/json.hpp ./argparse/argparse.hpp

TASK_NAME?=

.PHONY: all
all: compile link run

.PHONY: compile-lib
compile-lib:
	g++ -c $(H_FILES)

.PHONY: test
test: gen_tests
	g++ Song.cpp Database.cpp lib/cmdapp/cpp/TaskBase.cpp \
			lib/cmdapp/cpp/Task.cpp lib/cmdapp/cpp/Cmd.cpp \
			tasks/cpp/*.cpp SongBookApp.cpp main.cpp -o test.o
	./test.o

.PHONY: create_task
create_task:
	$(if $(TASK_NAME),,$(error TASK_NAME var empty, cannot create task!))
	@touch tasks/cpp/$(TASK_NAME).cpp
	@echo '#include <string>' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '#include <iostream>' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '#include <iomanip>' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '#include "../h/$(TASK_NAME).h"' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '#include "../../SongBookApp.h"' >> tasks/cpp/$(TASK_NAME).cpp
	@echo '' >> tasks/cpp/$(TASK_NAME).cpp
	@echo "int $(TASK_NAME)::Start()" >> tasks/cpp/$(TASK_NAME).cpp
	@echo '{' >> tasks/cpp/$(TASK_NAME).cpp
	@echo  '  std::cout << "TO BE IMPLEMENTED" << std::endl;'>> tasks/cpp/$(TASK_NAME).cpp
	@echo  "  return 1;" >> tasks/cpp/$(TASK_NAME).cpp
	@echo '}' >> tasks/cpp/$(TASK_NAME).cpp   
	@touch tasks/h/$(TASK_NAME).h
	@echo '#include <string>'    >> tasks/h/$(TASK_NAME).h
	@echo '#include "../../lib/cmdapp/cmdapp.h"'    >> tasks/h/$(TASK_NAME).h
	@echo "" >> tasks/h/$(TASK_NAME).h
	@echo 'class SongBookApp;'     >> tasks/h/$(TASK_NAME).h
	@echo "" >> tasks/h/$(TASK_NAME).h
	@echo "class $(TASK_NAME) : public Task<SongBookApp>"    >> tasks/h/$(TASK_NAME).h
	@echo "{"    >> tasks/h/$(TASK_NAME).h
	@echo "public:"    >> tasks/h/$(TASK_NAME).h
	@echo "  $(TASK_NAME)(std::string cmd, SongBookApp* parent) "    >> tasks/h/$(TASK_NAME).h
	@echo "    : Task<SongBookApp>(cmd, parent) {};"    >> tasks/h/$(TASK_NAME).h
	@echo ""    >> tasks/h/$(TASK_NAME).h
	@echo "int Start() override;"    >> tasks/h/$(TASK_NAME).h
	@echo "" >> tasks/h/$(TASK_NAME).h
	@echo '};'    >> tasks/h/$(TASK_NAME).h

gen_tests:
	@echo "// Autogenerated by Makefile ..." > tasks/tasks.h
	@echo "" >> tasks/tasks.h
	@for TASK in $(notdir $(wildcard tasks/h/*.h)); do echo "#include \"h/$$TASK\""; done >> tasks/tasks.h

# TODO
.PHONY: lib
lib:
	g++ -shared $(H_FILES) Song.cpp Database.cpp -o Database.so

.PHONY: build
build: compile-lib compile link

.PHONY: debug
debug: compile-with-debug link
	gdb ./$(OUTPUT_FILE)

.PHONY: run
run:
	@./$(OUTPUT_FILE)

.PHONY: compile-with-debug
compile-with-debug:
	g++ -g -c $(H_FILES) $(SOURCES)

compile:
	g++ -c $(SOURCES)

.PHONY: clean
clean:
	rm *.o
	rm *.gch
	rm ./$(OUTPUT_FILE)

.PHONY: doxygen
doxygen:
	doxygen cmdapp.cpp

link:
	g++ $(foreach file, $(SOURCES), $(basename $(file)).o) -o $(OUTPUT_FILE)
